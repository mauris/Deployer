<?php /*
 * Copyright (C) 2013 Sam-Mauris Yong. All rights reserved.
 * This file is part of the asyncloader.js project, which is released under New BSD 3-Clause license.
 * See file LICENSE or go to http://opensource.org/licenses/BSD-3-Clause for full license details.
 */

namespace Deployer;

use Deployer\Payload\Payload;

/**
 * Test class for Deployer.
 * Generated by PHPUnit on 2012-09-10 at 04:24:50.
 */
class DeployerTest extends \PHPUnit_Framework_TestCase
{
    private $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $payload = $this->getMockForAbstractClass('\Deployer\Payload\Payload', array(array()));
        $this->object = $this->getMockForAbstractClass('\Deployer\Deployer', array($payload));
        $this->object->options(array('logFile' => false));
    }

    public function testOptions()
    {
        $this->object->options(array('logFile' => false, 'branch' => 'test', 'blah' => null));
        $property = new \ReflectionProperty(get_class($this->object), 'options');
        $property->setAccessible(true);
        $options = $property->getValue($this->object);
        $this->assertCount(7, $options);
        $this->assertEquals(false, $options['logFile']);
        $this->assertEquals('test', $options['branch']);
    }

    public function testLogin()
    {
        $usernameProp = new \ReflectionProperty(get_class($this->object), 'username');
        $usernameProp->setAccessible(true);
        $passwordProp = new \ReflectionProperty(get_class($this->object), 'password');
        $passwordProp->setAccessible(true);
        $this->assertEquals(null, $usernameProp->getValue($this->object));
        $this->assertEquals(null, $passwordProp->getValue($this->object));

        $this->object->login('user', 'password');
        $this->assertEquals('user', $usernameProp->getValue($this->object));
        $this->assertEquals('password', $passwordProp->getValue($this->object));
    }

    public function testExecute()
    {
        $this->assertTrue(method_exists($this->object, 'execute'));
    }

    public function testDeploy()
    {
        $this->assertTrue(method_exists($this->object, 'deploy'));
    }
}
