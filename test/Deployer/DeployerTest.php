<?php

namespace Deployer;

/**
 * Test class for Deployer.
 * Generated by PHPUnit on 2012-09-10 at 04:24:50.
 */
class DeployerTest extends \PHPUnit_Framework_TestCase {
    
    /**
     * The mock object of Deployer
     * @var PHPUnit_Framework_MockObject_MockObject|Deployer
     */
    private $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = $this->getMockForAbstractClass('Deployer\Deployer', array(array()));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Deployer\Deployer::options
     */
    public function testOptions() {
        $this->object->options(array('logFile' => false, 'branch' => 'test', 'blah' => null));
        $property = new \ReflectionProperty(get_class($this->object), 'options');
        $property->setAccessible(true);
        $options = $property->getValue($this->object);
        $this->assertCount(6, $options);
        $this->assertEquals(false, $options['logFile']);
        $this->assertEquals('test', $options['branch']);
    }

    /**
     * @covers Deployer\Deployer::login
     */
    public function testLogin() {
        $usernameProp = new \ReflectionProperty(get_class($this->object), 'username');
        $usernameProp->setAccessible(true);
        $passwordProp = new \ReflectionProperty(get_class($this->object), 'password');
        $passwordProp->setAccessible(true);
        $this->assertEquals(null, $usernameProp->getValue($this->object));
        $this->assertEquals(null, $passwordProp->getValue($this->object));
        
        $this->object->login('user', 'password');
        $this->assertEquals('user', $usernameProp->getValue($this->object));
        $this->assertEquals('password', $passwordProp->getValue($this->object));
    }

    /**
     * @covers Deployer\Deployer::validate
     * @todo Implement testValidate().
     */
    public function testValidate() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Deployer\Deployer::log
     * @todo Implement testLog().
     */
    public function testLog() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Deployer\Deployer::execute
     * @todo Implement testExecute().
     */
    public function testExecute() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Deployer\Deployer::deploy
     * @todo Implement testDeploy().
     */
    public function testDeploy() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}

?>
